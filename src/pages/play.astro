---
import i18next, { t, changeLanguage } from 'i18next'
import { HeadHrefLangs } from 'astro-i18next/components'

const title = `Playground | ${t('site.title')}`
const description = t('site.description')
const image = '/img/wm-social.png'
const canonicalURL = new URL(Astro.url.pathname, Astro.site)

changeLanguage('en')
---

<html lang={i18next.language} data-theme='light'>
  <head>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width,initial-scale=1' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />

    <link rel='canonical' href={canonicalURL} />

    <title>{title}</title>
    <meta name='title' content={title} />
    <meta name='description' content={description} />

    <meta property='og:type' content='website' />
    <meta property='og:url' content={Astro.url} />
    <meta property='og:title' content={title} />
    <meta property='og:description' content={description} />
    <meta property='og:image' content={new URL(image, Astro.url)} />

    <meta property='twitter:card' content='summary_large_image' />
    <meta property='twitter:url' content={Astro.url} />
    <meta property='twitter:title' content={title} />
    <meta property='twitter:description' content={description} />
    <meta property='twitter:image' content={new URL(image, Astro.url)} />

    <HeadHrefLangs />
  </head>
  <body>
    <main>
      <div class='header'>
        <img src='/img/wm-logo--full-animated.svg' width='400' height='52' />
        <h1>Playground</h1>
      </div>
      <div class='form-wrapper'>
        <form id='walletAddressForm'>
          <div class='form-field'>
            <label for='walletAddressUrl'>Wallet address/Payment pointer</label>
            <input
              type='text'
              id='walletAddressUrl'
              name='walletAddressUrl'
              required
            />
          </div>
          <button class='full-width' type='submit' disabled>
            Add monetization link
          </button>
          <p>Checking if your browser supports Web Monetization...</p>
        </form>
      </div>
      <div id='link-events'></div>
    </main>
  </body>
</html>

<style is:inline>
  :root {
    --white: #fff;
    --black: #222;
    --light-teal: #def4ef;
    --bright-teal: #a4eae8;
    --teal: #007777;
    --red: #ef4444;
    --sl-font-system: ui-sans-serif, system-ui, -apple-system,
      BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
      'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
      'Segoe UI Symbol', 'Noto Color Emoji';
    --sl-font-system-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      'Liberation Mono', 'Courier New', monospace;
  }

  [data-theme='light'] {
    --background: var(--white);
    --text: var(--black);
    --accent: var(--teal);

    --button-background: var(--teal);
    --button-text: var(--white);
  }

  *,
  *::after,
  *::before {
    margin: 0;
    box-sizing: border-box;
  }

  body {
    color: var(--text);
    background-image: url('/img/bg-tile.svg');
    background-repeat: repeat;
    background-size: 30em;
    background-position: center;
    min-height: 100%;
    font-family: var(--sl-font-system);
  }

  main {
    padding: 3rem;
    min-width: 0;
  }

  h1 {
    text-transform: uppercase;
    text-align: center;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  input,
  button {
    font: inherit;
  }

  input {
    border: 1px solid var(--accent);
    border-radius: 0.375rem;
    padding: 0.5rem;
    background-color: var(--background);
    transition:
      box-shadow ease-in-out 0.2s,
      border-color ease-in-out 0.2s;
    color: var(--text);
  }

  button {
    display: inline-block;
    border: 2px solid transparent;
    background-color: var(--button-background);
    color: var(--button-text);
    padding: 0.75rem;
    border-radius: 0.375rem;
    cursor: pointer;
    text-decoration: underline;
    text-decoration-color: transparent;
    text-underline-offset: 2px;
    transition: text-decoration-color 0.2s ease-in-out;
    border: 1px solid transparent;
    font-weight: 600;

    &.full-width {
      width: 100%;
    }

    &:hover {
      text-decoration-color: currentcolor;
    }

    &:disabled {
      filter: grayscale(1);
      cursor: not-allowed;

      &:hover,
      &:focus {
        text-decoration-color: transparent;
      }
    }

    &.outline {
      background-color: var(--white);
      color: var(--accent);
      border-color: var(--bright-teal);
    }
  }

  @media screen and (max-width: 768px) {
    main {
      padding: 1rem;
    }
  }

  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5em;

    img {
      max-width: 25em;
    }
  }

  .form-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-block-start: 2rem;
    margin-inline: auto;
    max-width: 756px;

    form {
      width: 100%;
      max-width: 400px;
    }

    p {
      margin-block-start: 1rem;
      text-align: center;

      &.error {
        color: var(--red);
      }
    }
  }

  .form-field {
    display: flex;
    flex-direction: column;
    margin-block-end: 1rem;

    label {
      white-space: nowrap;
      margin-block-end: 0.25rem;
    }

    .form-field-error {
      margin-block-start: 0.5rem;
      color: red;
    }
  }

  #link-events {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(50ch, 1fr));
    margin-block-start: 2rem;

    div[data-wallet-address] {
      border-radius: 0.5rem;
      padding: 0.5rem;
      background-color: var(--light-teal);

      & .log-header {
        display: flex;
        gap: 1rem;
        align-items: center;
        justify-content: space-between;
        flex-direction: row;
        color: var(--accent);

        & h4 {
          overflow-x: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
        }
      }

      & .actions {
        display: flex;
        gap: 1rem;
      }

      & .amount {
        margin-block-end: 0.5rem;
      }

      & ul.events {
        font-family: var(--sl-font-system-mono);
        height: 20rem;
        margin-block: 0.5rem;
        padding-block-start: 0.5rem;
        padding-inline-start: 0.5rem;
        list-style: none;
        overflow-y: auto;
        white-space: nowrap;

        & details {
          & summary {
            & span {
              text-decoration: underline dotted;
              text-underline-offset: 2px;
              cursor: pointer;
            }
          }

          pre {
            margin-inline-start: 1rem;
          }
        }
      }
    }
  }

  @media screen and (min-width: 768px) {
    main {
      padding: 2rem;
    }

    #link-events {
      padding-inline: 2rem;
    }
  }

  @media screen and (max-width: 768px) {
    #link-events {
      display: flex;
      flex-direction: column;

      div[data-wallet-address] {
        & .log-header {
          align-items: flex-start;
          flex-direction: column;

          & h4 {
            text-align: center;
            font-size: smaller;
            width: 100%;
          }

          & .actions {
            width: 100%;
            justify-content: center;
            gap: 1rem;

            & button {
              font-size: smaller;
            }
          }
        }

        & ul.events {
          font-size: 14px;
          letter-spacing: -1px;
        }
      }
    }
  }

  @media screen and (max-width: 425px) {
    .header {
      img {
        max-width: 80%;
      }

      & h1 {
        font-size: smaller;
      }
    }

    form {
      min-width: 100% !important;
    }

    #link-events {
      & div[data-wallet-address] {
        & .log-header {
          & h4 {
            font-size: 12px;
          }

          & .actions {
            & button {
              font-size: smaller;
            }
          }
        }

        & ul.events {
          font-size: smaller;

          details {
            & pre {
              margin-inline-start: 0.5rem;
            }
          }
        }
      }
    }
  }
</style>

<script>
  const form = document.querySelector('#walletAddressForm') as HTMLFormElement
  const notice = document.querySelector('p') as HTMLParagraphElement
  const input = form.querySelector('input') as HTMLInputElement
  const submitButton = form.querySelector('button') as HTMLButtonElement
  const linkEvents = document.querySelector('#link-events') as HTMLDivElement

  if (window.MonetizationEvent) {
    submitButton.disabled = false
    notice.style.display = 'none'
  } else {
    setTimeout(() => {
      if (!window.MonetizationEvent) {
        notice.textContent = 'Your browser does not support Web Monetization.'
        notice.style.display = 'block'
        notice.classList.add('error')
        submitButton.disabled = true
      } else {
        submitButton.disabled = false
        notice.style.display = 'none'
      }
    }, 500)
  }

  async function createLinkTag(href: string) {
    const link = document.createElement('link')

    link.rel = 'monetization'
    link.href = href
    link.addEventListener('monetization', onMonetizationListener)
    link.addEventListener('load', onLoadListener)
    link.addEventListener('error', onErrorListener)
    link.dataset.walletAddress = href

    document.head.append(link)
  }

  async function createLinkEventLog(href: string) {
    const header = document.createElement('div')
    header.classList.add('log-header')

    const title = document.createElement('h4')
    title.textContent = href

    const actions = document.createElement('div')
    actions.classList.add('actions')

    const disableButton = document.createElement('button')
    disableButton.textContent = 'Disable'
    disableButton.classList.add('outline')
    disableButton.addEventListener('click', () => {
      const link = document.querySelector(
        `link[rel='monetization'][href='${href}']`
      ) as HTMLLinkElement
      link.disabled = !link.disabled
      disableButton.textContent = link.disabled ? 'Enable' : 'Disable'
    })

    const removeButton = document.createElement('button')
    removeButton.textContent = 'Remove'
    removeButton.classList.add('outline')
    removeButton.addEventListener('click', () => {
      const link = document.querySelector(
        `link[rel='monetization'][href='${href}']`
      ) as HTMLLinkElement
      link.remove()
      const eventLog = document.querySelector(
        `#link-events div[data-wallet-address='${href}']`
      ) as HTMLDivElement
      eventLog.remove()
    })

    const clearButton = document.createElement('button')
    clearButton.textContent = 'Clear events'
    clearButton.classList.add('outline')
    clearButton.addEventListener('click', () => {
      const ul = document.querySelector(
        `#link-events div[data-wallet-address='${href}'] ul.events`
      ) as HTMLDivElement
      ul.innerHTML = ''
    })

    actions.append(disableButton)
    actions.append(clearButton)
    actions.append(removeButton)

    header.append(title)
    header.append(actions)

    const eventLog = document.createElement('div')
    eventLog.dataset.walletAddress = href

    const events = document.createElement('ul')
    events.classList.add('events')

    eventLog.append(header)
    eventLog.append(events)

    linkEvents.append(eventLog)
  }

  function getLinkEventLog(event: Event): HTMLDivElement | null {
    if (!(event.target instanceof HTMLLinkElement)) return null
    if (!event.target.isConnected) return null

    return document.querySelector(
      `#link-events div[data-wallet-address='${event.target.dataset.walletAddress}'] ul.events`
    ) as HTMLDivElement
  }

  function capitalize(str: string) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  }

  function createLog(
    div: HTMLDivElement,
    type: string,
    event?: MonetizationEvent
  ) {
    const log = document.createElement('li')

    const time = new Date().toLocaleTimeString()
    let slot = `${capitalize(type)} Event`

    if (event) {
      const details = document.createElement('details')
      const summary = document.createElement('summary')
      const span = document.createElement('span')
      span.textContent = `${slot} - ${event.amountSent.value} ${event.amountSent.currency}`
      summary.append(`[${time}] `)
      summary.append(span)
      details.append(summary)

      const pre = document.createElement('pre')
      pre.textContent = JSON.stringify(event, null, 2)
      details.append(pre)

      log.append(details)
    } else {
      if (type === 'error') {
        slot += ` (Check browser console)`
      }

      const spacer = document.createElement('span')
      spacer.style.width = '0.25rem'
      spacer.style.display = 'inline-block'

      log.append(spacer)
      log.append(` [${time}] ${slot}`)
    }

    div.prepend(log)
  }

  function onMonetizationListener(event: MonetizationEvent) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    if (linkEventLog.dataset.incomingPayment !== event.incomingPayment) {
      linkEventLog.dataset.incomingPayment = event.incomingPayment
    }

    createLog(linkEventLog, event.type, event)
  }

  function onLoadListener(event: Event) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    createLog(linkEventLog, event.type)
  }

  function onErrorListener(event: Event) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    createLog(linkEventLog, event.type)
  }

  function toWalletAddressUrl(s: string): string {
    return s.startsWith('$') ? s.replace('$', 'https://') : s
  }

  input.addEventListener('input', function () {
    this.setCustomValidity('')
  })

  form.addEventListener('submit', async (e) => {
    e.preventDefault()

    const formData = new FormData(form)
    const walletAddress = formData.get('walletAddressUrl')?.valueOf()

    if (!walletAddress || typeof walletAddress !== 'string') {
      input.setCustomValidity('Please fill the wallet address URL field.')
      return false
    }

    const walletAddressUrl = toWalletAddressUrl(walletAddress)

    const walletAddressElement = document.querySelector(
      `[data-wallet-address='${walletAddress}']`
    )
    if (walletAddressElement) {
      input.setCustomValidity(`${walletAddress} already exists in the page.`)
      input.reportValidity()
      return false
    }

    await createLinkEventLog(walletAddressUrl)
    await createLinkTag(walletAddressUrl)

    form.reset()
  })
</script>
