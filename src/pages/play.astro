---
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import Base from '../layouts/Base.astro'
import Arrow from '../../public/img/arrow.svg'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const title = `Playground | ${t('site.title')}`
const description = t('site.description')
---

<Base title={title} description={description} hasFooter={false}>
  <section class='section'>
    <div class='contentWrapper'>
      <div class='header'>
        <a class='btn ghost' href='/tools' data-umami-event='Playground page link - Tools'>
          <Arrow class='arrow' />
          Go back
        </a>
        <h1>Web Monetization Playground</h1>
      </div>
      <div class='form-wrapper'>
        <form id='walletAddressForm'>
          <div class='form-field'>
            <label for='walletAddressUrl'>Wallet address/Payment pointer</label>
            <input
              type='text'
              id='walletAddressUrl'
              name='walletAddressUrl'
              placeholder='Fill in your wallet address'
              required
            />
          </div>
          <button
            class='btn tools-primary-btn'
            type='submit'
            data-umami-event='Play page - Add WebMo link'
            disabled
          >
            Add monetization link
          </button>
          <p>Checking if your browser supports Web Monetization...</p>
        </form>
      </div>
    </div>
    <div class='contentWrapper'>
      <div id='link-events' class='link-events'></div>
    </div>
  </section>
</Base>

<style>
  :root {
    --helper-text-default: var(--color-silver-800);
    --button-tools-primary-color: var(--color-green-300);
    --button-tools-primary-hover-color: var(--color-green-600);
    --field-edge: var(--color-silver-300);
    --paragraph-success: var(--color-green-600);
  }

  body {
    background-image: none;
  }

  button.tools-primary-btn {
    background-color: var(--button-tools-primary-color);
    font: var(--font-standard-bold);
    border: none;
    color: var(--color-white);
    justify-content: center;
  }

  button.tools-primary-btn:hover,
  button.tools-primary-btn:focus-visible {
    background-color: var(--button-tools-primary-hover-color);
  }

  .link-events {
    div[data-wallet-address] {
      & .log-header {
        & .actions {
          & button.tools-secondary-btn {
            background-color: transparent;
            color: var(--button-ghost-color);
            border: 1px solid var(--button-ghost-color);
            font: var(--font-standard-regular);
          }

          & button.tools-secondary-btn:hover,
          button.tools-secondary-btn:focus-visible {
            background-color: transparent;
            color: var(--button-hover-color);
            border: 1px solid var(--button-hover-color);
          }
        }
      }
    }
  }

  .header {
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    display: flex;
    margin-bottom: var(--spacing-3xl);
    gap: var(--spacing-xs);
    padding-inline: var( --padding-md);
  }

  .header a.btn {
    align-self: auto;
    font: var(--font-standard-regular);
    flex: 0 0 auto;
    white-space: nowrap;
  }

  .btn .arrow {
    height: 20px;
    width: 20px;
    display: inline-block;
    margin: var(--spacing-3xs) 0;
    transform: rotate(180deg);
  }

  .header h1 {
    width: 100%;
    text-align: center;
  }

  .form-wrapper {
    padding-inline: var(--padding-md);
  }

  form {
    width: 100%;
    padding: var(--padding-md);
    background-color: var(--color-white);
    border-radius: var(--moderate-rounding);
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  label {
    white-space: nowrap;
    font: var(--font-caption);
    color: var(--helper-text-default);
  }

  .form-wrapper .form-field input {
    border: 1px solid var(--field-edge);
  }

  .link-events {
    display: flex;
    flex-direction: column;
    width: 100%;
    padding-inline: var(--padding-md);
    margin-top: var(--spacing-md);
    gap: var(--spacing-md);
    font: var(--font-small-regular);
  }

  .link-events {
    div[data-wallet-address] {
      padding: var(--padding-md);
      background-color: var(--color-mint-50);
      border-radius: var(--moderate-rounding);
      border: 1px solid var(--color-green-100);
      & .log-header {
        padding-bottom: var(--padding-sm);
        margin-bottom: var(--spacing-sm);
        border-bottom: 1px solid var(--color-silver-200);
        gap: var(--spacing-sm);
        display: flex;
        align-items: center;
        justify-content: space-between;
        & p {
          max-width: 100%;
          overflow-x: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
          text-align: center;
          color: var(--paragraph-success);
        }

        & .actions {
          display: flex;
          gap: var(--spacing-sm);
          justify-content: center;
          flex: none;
          flex-wrap: wrap;
        }
      }

      & ul.events {
        font-family: var(--sl-font-system-mono);
        height: 20rem;
        margin-block: var(--spacing-sm);
        padding-block-start: var(--padding-sm);
        padding-inline-start: var(--padding-sm);
        list-style: none;
        overflow-y: auto;
        white-space: nowrap;

        & li {
          margin-block-end: var(--spacing-2xs);

          & details {
            & summary {
              cursor: pointer;

              & span {
                text-decoration: underline dotted;
                text-underline-offset: 2px;
              }
            }

            & pre {
              padding: var(--padding-xs);
              margin-inline-start: var(--spacing-md);
            }
          }
        }
      }
    }
  }

  @media screen and (max-width: 767px) {
    .header {
      flex-direction: column;
      margin-bottom: var(--spacing-lg);
      align-items: flex-start;
    }

    .header .btn {
      align-self: flex-start;
    }

    .link-events {
      div[data-wallet-address] {
        & .log-header {
          flex-direction: column;
        }
      }
    }
  }
</style>

<script>
  const form = document.querySelector('#walletAddressForm') as HTMLFormElement
  const notice = document.querySelector('p') as HTMLParagraphElement
  const input = form.querySelector('input') as HTMLInputElement
  const submitButton = form.querySelector('button') as HTMLButtonElement
  const linkEvents = document.querySelector('#link-events') as HTMLDivElement

  if (window.MonetizationEvent) {
    submitButton.disabled = false
    notice.style.display = 'none'
    addTagsFromURL()
  } else {
    setTimeout(() => {
      if (!window.MonetizationEvent) {
        notice.textContent = 'Your browser does not support Web Monetization.'
        notice.style.display = 'block'
        notice.classList.add('error')
        submitButton.disabled = true
      } else {
        submitButton.disabled = false
        notice.style.display = 'none'
        addTagsFromURL()
      }
    }, 500)
  }

  function createLinkTag(href: string) {
    const link = document.createElement('link')

    link.rel = 'monetization'
    link.href = href
    link.addEventListener('monetization', onMonetizationListener)
    link.addEventListener('load', onLoadListener)
    link.addEventListener('error', onErrorListener)
    link.dataset.walletAddress = href

    document.head.append(link)
  }

  async function createLinkEventLog(href: string) {
    const header = document.createElement('div')
    header.classList.add('log-header')

    const title = document.createElement('p')
    title.textContent = href

    const actions = document.createElement('div')
    actions.classList.add('actions')

    const disableButton = document.createElement('button')
    disableButton.textContent = 'Disable'
    disableButton.classList.add('btn', 'tools-secondary-btn')
    disableButton.addEventListener('click', () => {
      const link = document.querySelector(
        `link[rel='monetization'][href='${href}']`
      ) as HTMLLinkElement
      link.disabled = !link.disabled
      disableButton.textContent = link.disabled ? 'Enable' : 'Disable'
    })

    const removeButton = document.createElement('button')
    removeButton.textContent = 'Remove'
    removeButton.classList.add('btn', 'tools-secondary-btn')
    removeButton.addEventListener('click', () => {
      const link = document.querySelector(
        `link[rel='monetization'][href='${href}']`
      ) as HTMLLinkElement
      link.remove()
      const eventLog = document.querySelector(
        `#link-events div[data-wallet-address='${href}']`
      ) as HTMLDivElement
      eventLog.remove()
    })

    const clearButton = document.createElement('button')
    clearButton.textContent = 'Clear events'
    clearButton.classList.add('btn', 'tools-secondary-btn')
    clearButton.addEventListener('click', () => {
      const ul = document.querySelector(
        `#link-events div[data-wallet-address='${href}'] ul.events`
      ) as HTMLDivElement
      ul.innerHTML = ''
    })

    actions.append(disableButton)
    actions.append(clearButton)
    actions.append(removeButton)

    header.append(title)
    header.append(actions)

    const eventLog = document.createElement('div')
    eventLog.dataset.walletAddress = href

    const events = document.createElement('ul')
    events.classList.add('events')

    eventLog.append(header)
    eventLog.append(events)

    linkEvents.append(eventLog)
  }

  function getLinkEventLog(event: Event): HTMLDivElement | null {
    if (!(event.target instanceof HTMLLinkElement)) return null
    if (!event.target.isConnected) return null

    return document.querySelector(
      `#link-events div[data-wallet-address='${event.target.dataset.walletAddress}'] ul.events`
    ) as HTMLDivElement
  }

  function capitalize(str: string) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  }

  function createLog(
    div: HTMLDivElement,
    type: string,
    event?: MonetizationEvent
  ) {
    const log = document.createElement('li')

    const time = new Date().toLocaleTimeString()
    let slot = `${capitalize(type)} Event`

    if (event) {
      const details = document.createElement('details')
      const summary = document.createElement('summary')
      const span = document.createElement('span')
      span.textContent = `${slot} - ${event.amountSent.value} ${event.amountSent.currency}`
      summary.append(`[${time}] `)
      summary.append(span)
      details.append(summary)

      const pre = document.createElement('pre')
      pre.textContent = JSON.stringify(event, null, 2)
      details.append(pre)

      log.append(details)
    } else {
      if (type === 'error') {
        slot += ` (Check browser console)`
      }

      const spacer = document.createElement('span')
      spacer.append(` [${time}] ${slot}`)
      log.append(spacer)
    }

    div.prepend(log)
  }

  function onMonetizationListener(event: MonetizationEvent) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    if (linkEventLog.dataset.incomingPayment !== event.incomingPayment) {
      linkEventLog.dataset.incomingPayment = event.incomingPayment
    }

    createLog(linkEventLog, event.type, event)
  }

  function onLoadListener(event: Event) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    createLog(linkEventLog, event.type)
  }

  function onErrorListener(event: Event) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    createLog(linkEventLog, event.type)
  }

  function toWalletAddressUrl(s: string): string {
    return s.startsWith('$') ? s.replace('$', 'https://') : s
  }

  input.addEventListener('input', function () {
    this.setCustomValidity('')
  })

  form.addEventListener('submit', async (e) => {
    e.preventDefault()

    const formData = new FormData(form)
    const walletAddress = formData.get('walletAddressUrl')?.valueOf()

    if (!walletAddress || typeof walletAddress !== 'string') {
      input.setCustomValidity('Please fill the wallet address URL field.')
      return false
    }

    const walletAddressUrl = toWalletAddressUrl(walletAddress)

    if (addressAlreadyAdded(walletAddressUrl)) {
      input.setCustomValidity(`${walletAddress} already exists in the page.`)
      input.reportValidity()
      return false
    }

    await createLinkEventLog(walletAddressUrl)
    createLinkTag(walletAddressUrl)

    form.reset()
  })

  async function addTagsFromURL() {
    const walletAddressUrls = new URLSearchParams(location.search).getAll('wa')
    const urlsToAdd = new Set(walletAddressUrls.filter(isWalletAddressUrl))
    for (const url of urlsToAdd) {
      await createLinkEventLog(url)
    }
    urlsToAdd.forEach(createLinkTag)
  }

  function isWalletAddressUrl(s: string): boolean {
    try {
      return !!new URL(s)
    } catch {
      return false
    }
  }

  function addressAlreadyAdded(walletAddressUrl: string) {
    // current implementation of playground doesn't support adding same link tag twice
    // BUG: it should be allowed
    return !!document.querySelector(
      `[data-wallet-address='${walletAddressUrl}']`
    )
  }
</script>
