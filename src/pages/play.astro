---
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import Base from '../layouts/Base.astro'
import ToolsHeader from '../components/pages/ToolsHeader.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
---

<Base
  title={t('pages.play.title')}
  description={t('pages.play.description')}
  toolsStyling={true}
>
  <section class='section'>
    <div class='contentWrapper'>
      <ToolsHeader
        headingText='Web Monetization Playground'
        pageTitle='Playground'
        backButtonText='Go back'
      />
      <p class='text'>
        The Web Monetization Playground is an interactive environment that shows
        how Web Monetization works under the hood. Add a wallet address or
        payment pointer and watch events and payment flows unfold in real time.
      </p>
      <div class='form-wrapper'>
        <form id='walletAddressForm'>
          <div class='form-field'>
            <label for='walletAddressUrl'>Wallet address/Payment pointer</label>
            <input
              type='text'
              id='walletAddressUrl'
              name='walletAddressUrl'
              placeholder='https://walletprovider.com/myWallet'
              required
            />
          </div>
          <button
            class='btn tools-primary-btn'
            type='submit'
            data-umami-event='Play page - Add WebMo link'
            disabled
          >
            Add monetization link
          </button>
          <p id='notice'>
            Checking if your browser supports Web Monetization...
          </p>
        </form>
      </div>
    </div>
    <div class='contentWrapper'>
      <div id='link-events' class='link-events'></div>
    </div>
  </section>
</Base>

<style>
  p.text {
    padding-inline: var(--padding-md);
    margin-bottom: var(--spacing-3xl);
  }
  .link-events {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
    width: 100%;
    padding-inline: var(--padding-md);
    margin-top: var(--spacing-md);
    gap: var(--spacing-md);
    font: var(--font-small-regular);
    div[data-wallet-address] {
      padding: var(--padding-md);
      background-color: var(--color-mint-50);
      border-radius: var(--moderate-rounding);
      border: 1px solid var(--color-green-100);
      & .log-header {
        padding-bottom: var(--padding-sm);
        margin-bottom: var(--spacing-sm);
        border-bottom: 1px solid var(--color-silver-200);
        gap: var(--spacing-sm);
        display: flex;
        align-items: center;
        justify-content: space-between;
        & p {
          max-width: 100%;
          overflow-x: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
          text-align: center;
          color: var(--paragraph-success);
        }

        .wallet-switch {
          display: flex;
          align-items: center;
          gap: var(--spacing-sm);

          .switch-text {
            font: var(--font-standard-regular);
            color: var(--default-font-color);
          }

          .switch-container {
            position: relative;
            display: inline-block;
            width: 2.75rem;
            height: 1.5rem;
          }

          input {
            width: 100%;
            height: 100%;
          }

          .switch-slider {
            position: absolute;
            inset: 0;
            background-color: var(--color-silver-300);
            border-radius: var(--fully-rounded);
            cursor: pointer;
          }

          .switch-slider::before {
            content: '';
            position: absolute;
            width: 1.25rem;
            height: 1.25rem;
            top: 0.125rem;
            left: 0.125rem;
            background-color: var(--color-white);
            border-radius: var(--fully-rounded);
            transition: transform 0.3s;
          }

          input:checked + .switch-slider {
            background-color: var(--button-ghost-color);
          }

          input:checked + .switch-slider::before {
            transform: translateX(1.25rem);
          }
        }
      }

      & ul.events {
        font-family: var(--sl-font-system-mono);
        height: 20rem;
        margin-block: var(--spacing-sm);
        padding: var(--padding-sm) 0px var(--padding-sm) var(--padding-sm);
        list-style: none;
        overflow-y: auto;
        white-space: nowrap;
        border-bottom: 1px solid var(--color-silver-200);

        & li {
          margin-block-end: var(--spacing-2xs);

          & details {
            & summary {
              cursor: pointer;

              & span {
                text-decoration: underline dotted;
                text-underline-offset: 2px;
              }
            }

            & pre {
              padding: var(--padding-xs);
              margin-inline-start: var(--spacing-md);
            }
          }
        }
      }

      & .log-footer {
        gap: var(--spacing-sm);
        display: flex;
        align-items: center;
        justify-content: right;

        & button.tools-secondary-btn {
          background-color: transparent;
          color: var(--button-ghost-color);
          border: none;
          font: var(--font-standard-regular);
        }
        & button.tools-secondary-btn:hover,
        & button.tools-secondary-btn:focus-visible {
          background-color: var(--surface-hover-color);
          color: var(--button-hover-color);
        }
      }
    }
  }

  @media screen and (max-width: 767px) {
    p.text {
      margin-bottom: var(--spacing-lg);
    }
    .link-events {
      & div[data-wallet-address] {
        & .log-header {
          flex-direction: column;
        }
      }
    }
  }
</style>

<script>
  const form = document.querySelector('#walletAddressForm') as HTMLFormElement
  const notice = document.querySelector('#notice') as HTMLParagraphElement
  const input = form.querySelector('input') as HTMLInputElement
  const submitButton = form.querySelector('button') as HTMLButtonElement
  const linkEvents = document.querySelector('#link-events') as HTMLDivElement

  if (window.MonetizationEvent) {
    submitButton.disabled = false
    notice.style.display = 'none'
    addTagsFromURL()
  } else {
    setTimeout(() => {
      if (!window.MonetizationEvent) {
        notice.textContent = 'Your browser does not support Web Monetization.'
        notice.style.display = 'block'
        notice.classList.add('error')
        submitButton.disabled = true
      } else {
        submitButton.disabled = false
        notice.style.display = 'none'
        addTagsFromURL()
      }
    }, 500)
  }

  function createLinkTag(href: string) {
    const link = document.createElement('link')

    link.rel = 'monetization'
    link.href = href
    link.addEventListener('monetization', onMonetizationListener)
    link.addEventListener('load', onLoadListener)
    link.addEventListener('error', onErrorListener)
    link.dataset.walletAddress = href

    document.head.append(link)
  }

  async function createLinkEventLog(href: string) {
    const header = document.createElement('div')
    header.classList.add('log-header')

    const title = document.createElement('p')
    title.textContent = href

    const footer = document.createElement('div')
    footer.classList.add('log-footer')

    const switchButton = document.createElement('div')
    switchButton.innerHTML = `
      <label class="wallet-switch">
        <span class="switch-text">Enabled</span>
        <span class="switch-container">
          <input type="checkbox" checked>
          <span class="switch-slider"></span>
        </span>
      </label>`

    switchButton.addEventListener('click', () => {
      const link = document.querySelector(
        `link[rel='monetization'][href='${href}']`
      ) as HTMLLinkElement
      link.disabled = !link.disabled
    })

    const removeButton = document.createElement('button')
    removeButton.innerHTML = `<svg aria-hidden="true" width="20" height="20" viewBox="0 0 24 24" fill="none">
      <path d="M7.616 20C7.168 20 6.78667 19.8426 6.472 19.528C6.15733 19.2133 6 18.8323 6 18.385V5.99998H5V4.99998H9V4.22998H15V4.99998H19V5.99998H18V18.385C18 18.845 17.846 19.2293 17.538 19.538C17.23 19.8466 16.8453 20.0006 16.384 20H7.616ZM17 5.99998H7V18.385C7 18.5643 7.05767 18.7116 7.173 18.827C7.28833 18.9423 7.436 19 7.616 19H16.385C16.5383 19 16.6793 18.936 16.808 18.808C16.9367 18.68 17.0007 18.5386 17 18.384V5.99998ZM9.808 17H10.808V7.99998H9.808V17ZM13.192 17H14.192V7.99998H13.192V17Z" fill="currentColor"/>
      </svg>
      Remove`
    removeButton.classList.add('btn', 'tools-secondary-btn')
    removeButton.addEventListener('click', () => {
      const link = document.querySelector(
        `link[rel='monetization'][href='${href}']`
      ) as HTMLLinkElement
      link.remove()
      const eventLog = document.querySelector(
        `#link-events div[data-wallet-address='${href}']`
      ) as HTMLDivElement
      eventLog.remove()
    })

    const clearButton = document.createElement('button')
    clearButton.innerHTML = `<svg aria-hidden="true" width="20" height="20" viewBox="0 0 24 24" fill="none">
      <path d="M4 22V16.134C4 14.9107 4.43133 13.8677 5.294 13.005C6.15667 12.1423 7.19967 11.711 8.423 11.711H9.712V3.634C9.712 3.18467 9.866 2.8 10.174 2.48C10.4827 2.16 10.8607 2 11.308 2H12.692C13.14 2 13.518 2.16 13.826 2.48C14.1347 2.8 14.289 3.18467 14.289 3.634V11.712H15.558C16.7867 11.712 17.8343 12.143 18.701 13.005C19.567 13.8683 20 14.9117 20 16.135V22H4ZM5 21H7.75V17.48C7.75 17.3387 7.798 17.2203 7.894 17.125C7.99 17.0297 8.109 16.9817 8.251 16.981C8.393 16.9803 8.51167 17.028 8.607 17.124C8.70233 17.22 8.75 17.339 8.75 17.481V21H11.5V17.48C11.5 17.3387 11.548 17.2203 11.644 17.125C11.74 17.0297 11.859 16.9817 12.001 16.981C12.143 16.9803 12.2617 17.028 12.357 17.124C12.4523 17.22 12.5 17.339 12.5 17.481V21H15.25V17.48C15.25 17.3387 15.298 17.2203 15.394 17.125C15.49 17.0297 15.609 16.9817 15.751 16.981C15.893 16.9803 16.0117 17.028 16.107 17.124C16.2023 17.22 16.25 17.339 16.25 17.481V21H19V16.134C19 15.1727 18.6653 14.362 17.996 13.702C17.3267 13.042 16.514 12.712 15.558 12.712H8.423C7.47233 12.712 6.66433 13.0447 5.999 13.71C5.333 14.3753 5 15.1833 5 16.134V21ZM13.289 11.712V3.634C13.289 3.454 13.231 3.30333 13.115 3.182C12.9997 3.06067 12.8587 3 12.692 3H11.308C11.1413 3 11 3.061 10.884 3.183C10.7687 3.305 10.711 3.45567 10.711 3.635V11.712H13.289Z" fill="currentColor"/>
      </svg>
      Clean`
    clearButton.classList.add('btn', 'tools-secondary-btn')
    clearButton.addEventListener('click', () => {
      const ul = document.querySelector(
        `#link-events div[data-wallet-address='${href}'] ul.events`
      ) as HTMLDivElement
      ul.innerHTML = ''
    })

    header.append(title)
    header.append(switchButton)

    footer.append(clearButton)
    footer.append(removeButton)

    const eventLog = document.createElement('div')
    eventLog.dataset.walletAddress = href

    const events = document.createElement('ul')
    events.classList.add('events')

    eventLog.append(header)
    eventLog.append(events)
    eventLog.append(footer)

    linkEvents.append(eventLog)
  }

  function getLinkEventLog(event: Event): HTMLDivElement | null {
    if (!(event.target instanceof HTMLLinkElement)) return null
    if (!event.target.isConnected) return null

    return document.querySelector(
      `#link-events div[data-wallet-address='${event.target.dataset.walletAddress}'] ul.events`
    ) as HTMLDivElement
  }

  function capitalize(str: string) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  }

  function createLog(
    div: HTMLDivElement,
    type: string,
    event?: MonetizationEvent
  ) {
    const log = document.createElement('li')

    const time = new Date().toLocaleTimeString()
    let slot = `${capitalize(type)} Event`

    if (event) {
      const details = document.createElement('details')
      const summary = document.createElement('summary')
      const span = document.createElement('span')
      span.textContent = `${slot} - ${event.amountSent.value} ${event.amountSent.currency}`
      summary.append(`[${time}] `)
      summary.append(span)
      details.append(summary)

      const pre = document.createElement('pre')
      pre.textContent = JSON.stringify(event, null, 2)
      details.append(pre)

      log.append(details)
    } else {
      if (type === 'error') {
        slot += ` (Check browser console)`
      }

      const spacer = document.createElement('span')
      spacer.append(` [${time}] ${slot}`)
      log.append(spacer)
    }

    div.prepend(log)
  }

  function onMonetizationListener(event: MonetizationEvent) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    if (linkEventLog.dataset.incomingPayment !== event.incomingPayment) {
      linkEventLog.dataset.incomingPayment = event.incomingPayment
    }

    createLog(linkEventLog, event.type, event)
  }

  function onLoadListener(event: Event) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    createLog(linkEventLog, event.type)
  }

  function onErrorListener(event: Event) {
    const linkEventLog = getLinkEventLog(event)
    if (!linkEventLog) return

    createLog(linkEventLog, event.type)
  }

  function toWalletAddressUrl(s: string): string {
    return s.startsWith('$') ? s.replace('$', 'https://') : s
  }

  input.addEventListener('input', function () {
    this.setCustomValidity('')
  })

  form.addEventListener('submit', async (e) => {
    e.preventDefault()

    const formData = new FormData(form)
    const walletAddress = formData.get('walletAddressUrl')?.valueOf()

    if (!walletAddress || typeof walletAddress !== 'string') {
      input.setCustomValidity('Please fill the wallet address URL field.')
      return false
    }

    const walletAddressUrl = toWalletAddressUrl(walletAddress)

    if (addressAlreadyAdded(walletAddressUrl)) {
      input.setCustomValidity(`${walletAddress} already exists in the page.`)
      input.reportValidity()
      return false
    }

    await createLinkEventLog(walletAddressUrl)
    createLinkTag(walletAddressUrl)

    form.reset()
  })

  async function addTagsFromURL() {
    const walletAddressUrls = new URLSearchParams(location.search).getAll('wa')
    const urlsToAdd = new Set(walletAddressUrls.filter(isWalletAddressUrl))
    for (const url of urlsToAdd) {
      await createLinkEventLog(url)
    }
    urlsToAdd.forEach(createLinkTag)
  }

  function isWalletAddressUrl(s: string): boolean {
    try {
      return !!new URL(s)
    } catch {
      return false
    }
  }

  function addressAlreadyAdded(walletAddressUrl: string) {
    // current implementation of playground doesn't support adding same link tag twice
    // BUG: it should be allowed
    return !!document.querySelector(
      `[data-wallet-address='${walletAddressUrl}']`
    )
  }
</script>
