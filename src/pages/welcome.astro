---
import i18next, { t, changeLanguage } from 'i18next'
import Base from "../layouts/Base.astro";

changeLanguage("en");
const title = `Welcome | ${t("site.title")}`;
const description = t("site.description");
---

<Base title={title} description={description}>
  <section>
    <div class='contentWrapperLg heroContent'>
      <img
        alt='Loading'
        class='heroLogo'
        src='/img/wm-logo--animated.svg'
      />
      <h2 class="heroHeading">Please wait ...</h2>
      <p>Do not close this tab.</p>
    </div>
  </section>
</Base>

<style>
  body {
    background-image: url('/img/bg-tile.svg');
    background-size: 25em;
  }

  section {
    display: flex;
    height: 100%;
  }

  div {
    margin: auto;
    text-align: center;
  }

  .heroLogo {
    max-width: 8em;
    margin-block-end: var(--space-s);
  }

  h2 {
    font-size: var(--step-4);
    line-height: 1.2;
    color: var(--wm-accent);
    width: 25ch;
  }

  .heroContent p {
    margin-block-start: var(--space-s);
  }
</style>

<script>
  const enum SuccessParam {
    SUCCESS = 'grant_success',
    ERROR = 'grant_error',
    REJECTED = 'grant_rejected',
    INVALID = 'grant_invalid',
    KEY_SUCCESS = 'key_add_success',
    KEY_ERROR = 'key_add_error',
  }

  type Intent = 'connect' | 'reconnect' | 'funds' | 'update_budget'

  const DEFAULT_ERROR_MESSAGE = function (_version: string, intent: Intent) {
    if(intent === 'funds') {
      return 'Something went wrong. Please try adding funds again.'
    }
    if(intent === 'update_budget') {
      return 'Something went wrong. Please try updating your budget again.'
    }
    return 'Something went wrong. Please try reconnecting your wallet.'
  }
  const CLOSE_TAB_MESSAGE = 'You may safely close this tab.'

  /**
   * Includes versioning for future proof if needed.
   */
  type ErrorCode = keyof typeof ERROR_MESSAGES

  const ERROR_MESSAGES = {
    continuation_failed(_version: string, intent: Intent): string {
      if(intent === 'funds') {
        return 'An error occurred. Please try adding funds again.'
      }
      if(intent === 'update_budget') {
        return 'An error occurred. Please try updating your budget again.'
      }
      return 'An error occurred. Please try reconnecting the wallet.'
    },
    hash_failed(_version: string, intent: Intent): string {
      if(intent === 'funds') {
        return 'An error occurred. Please try adding funds again.'
      }
      if(intent === 'update_budget') {
        return 'An error occurred. Please try updating your budget again.'
      }
      return 'An error occurred. Please try reconnecting the wallet.'
    },
  }

  const MESSAGES = {
    grant_success(_version: string, intent: Intent): string {
      if(intent === 'funds') {
        return 'You have successfully added more funds.'
      }
      if(intent === 'update_budget') {
        return 'You have successfully updated your budget.'
      }
      return 'Your wallet is now successfully connected to the extension.'
    },
    key_add_success(_version: string): string {
      return 'Your wallet is now successfully reconnected to the extension.'
    },
    grant_rejected(_version: string, intent: Intent): string {
      if(intent === 'funds') {
        return 'No funds were added.'
      }
      if(intent === 'update_budget') {
        return 'Your budget was not updated.'
      }
      return 'Your request was successfully rejected.'
    },
    key_add_error(_version: string): string {
      return 'Something went wrong with your request. Please try reconnecting your wallet.'
    },
    grant_invalid(_version: string, intent: Intent): string {
      if(intent === 'funds') {
        return 'Something went wrong with your request. Please try adding funds again.'
      }
      if(intent === 'update_budget') {
        return 'Something went wrong with your request. Please try updating your budget again.'
      }
      return 'Something went wrong with your request. Please try reconnecting your wallet.'
    }
  }

  const searchParams = new URL(document.location.href).searchParams
  const heroContent = document.querySelector('.heroContent') as HTMLDivElement
  const heroInfo = heroContent.querySelector('p') as HTMLParagraphElement
  const heroLogo = document.querySelector('.heroLogo') as HTMLImageElement
  const heroHeading = document.querySelector('.heroHeading') as HTMLHeadingElement
  const result = searchParams.get('result') as SuccessParam
  const errorCode = searchParams.get('errorCode') as ErrorCode
  const version = searchParams.get('version') ?? 'default'
  const intent = (searchParams.get('intent') ?? 'connect') as Intent

  function updateImage(type: 'success' | 'error' | 'warning') {
    heroLogo.src = `/img/${type}.svg`
    heroLogo.alt = type
  }

  switch (result) {
    case SuccessParam.SUCCESS:
      updateImage('success')
      heroInfo.textContent = CLOSE_TAB_MESSAGE
      heroHeading.textContent = MESSAGES[SuccessParam.SUCCESS](version, intent)
      break
    case SuccessParam.KEY_SUCCESS:
      updateImage('success')
      heroInfo.textContent = CLOSE_TAB_MESSAGE
      heroHeading.textContent = MESSAGES[SuccessParam.KEY_SUCCESS](version)
      break
    case SuccessParam.REJECTED:
      updateImage('warning')
      heroInfo.textContent = CLOSE_TAB_MESSAGE
      heroHeading.textContent = MESSAGES[SuccessParam.REJECTED](version, intent)
      break
    case SuccessParam.KEY_ERROR:
      updateImage('error')
      heroInfo.textContent = CLOSE_TAB_MESSAGE
      heroHeading.textContent = MESSAGES[SuccessParam.KEY_ERROR](version)
      break
    case SuccessParam.INVALID:
      updateImage('error')
      heroInfo.textContent = CLOSE_TAB_MESSAGE
      heroHeading.textContent = MESSAGES[SuccessParam.INVALID](version, intent)
      break
    case SuccessParam.ERROR:
      updateImage('error')
      heroInfo.textContent = CLOSE_TAB_MESSAGE
      if (errorCode in ERROR_MESSAGES) {
        heroHeading.textContent = ERROR_MESSAGES[errorCode](version, intent)
      } else {
        heroHeading.textContent = DEFAULT_ERROR_MESSAGE(version, intent)
      }
      break
    default:
      break
  }
</script>
