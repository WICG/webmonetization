---
import chromeWebstore from '@assets/chrome-webstore.png'
import fxBrowserIcon from '@assets/Fx-Browser-icon.png'
import safariIcon from '@assets/browser-safari.png'
import microsoftEdge from '@assets/microsoft-edge.png'
import githubIcon from '@assets/icon-github.svg'
import { getLangFromUrl, useTranslations } from '../i18n/utils'
interface Props {
  utm?: Partial<
    Record<`utm_${'source' | 'medium' | 'content' | 'campaign'}`, string>
  >
  includeGitHub?: boolean
  variant?: 'docs' | 'pages'
}

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const { utm, includeGitHub = false, variant } = Astro.props

const URLS = {
  chrome: `https://chromewebstore.google.com/detail/web-monetization/oiabcfomehhigdepbbclppomkhlknpii`,
  firefox: `https://addons.mozilla.org/en-US/firefox/addon/web-monetization-extension/`,
  safari: `https://apps.apple.com/app/web-monetization/id6754325288`,
  edge: `https://microsoftedge.microsoft.com/addons/detail/web-monetization/imjgemgmeoioefpmfefmffbboogighjl`,
  github: `https://github.com/interledger/web-monetization-extension/releases/latest`,
}

const toURL = (url: string) => {
  const result = new URL(url)
  if (utm && !utm.utm_source) {
    result.searchParams.set('utm_source', Astro.site!.hostname)
  }
  for (const [k, v] of Object.entries(utm || {})) {
    result.searchParams.set(k, v)
  }
  return result.href
}
---

<ul class={variant}>
  <li>
    <div class='container'>
      <a href={toURL(URLS.chrome)} title={t('media.title.extension.chrome')}>
        <img
          src={chromeWebstore.src}
          alt={t('media.title.extension.chrome')}
          width={chromeWebstore.width}
          height={chromeWebstore.height}
        />
      </a>
    </div>
  </li>
  <li>
    <div class='container'>
      <a href={toURL(URLS.firefox)} title={t('media.title.extension.firefox')}>
        <img
          src={fxBrowserIcon.src}
          alt={t('media.title.extension.firefox')}
          width={fxBrowserIcon.width}
          height={fxBrowserIcon.height}
        />
      </a>
    </div>
  </li>
  <li>
    <div class='container'>
      <a href={toURL(URLS.safari)} title={t('media.title.extension.safari')}>
        <img
          src={safariIcon.src}
          alt={t('media.title.extension.safari')}
          width={safariIcon.width}
          height={safariIcon.height}
        />
      </a>
    </div>
  </li>
  <li>
    <div class='container'>
      <a href={toURL(URLS.edge)} title={t('media.title.extension.edge')}>
        <img
          src={microsoftEdge.src}
          alt={t('media.title.extension.edge')}
          width={microsoftEdge.width}
          height={microsoftEdge.height}
        />
      </a>
    </div>
  </li>
  {
    includeGitHub && (
      <li>
        <div class='container'>
          <a
            href={toURL(URLS.github)}
            title={t('media.title.extension.github')}
          >
            <img
              alt={t('media.title.extension.github')}
              src={githubIcon.src}
              width={githubIcon.width}
              height={githubIcon.height}
            />
          </a>
        </div>
      </li>
    )
  }
</ul>

<style>
  ul {
    list-style: none;
    align-items: baseline;
    flex-wrap: wrap;
    padding: 0;
  }

  a {
    display: flex;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
  }

  img {
    transition: transform 0.2s ease-in-out;
  }
  a:hover img {
    transform: scale(1.05);
  }

  /* Docs variant */
  ul.docs {
    display: inline-flex;
    justify-content: center;
    gap: var(--space-m);
  }

  .docs a {
    padding: 0.5rem;
    --shadow-color: rgba(191, 191, 191, 1);
    --shadow-x: 2px;
    box-shadow:
      var(--shadow-x) 2px 8px var(--shadow-color),
      var(--shadow-x) 2px 2px 1px var(--shadow-color);
    transition: box-shadow 0.2s ease-in-out;
  }

  .docs img {
    width: 3rem;
    height: 3rem;
  }

  .docs a:hover {
    --shadow-x: 3px;
  }

  /* Pages variant */
  ul.pages {
    display: flex;
    justify-content: space-between;
  }

  .pages li {
    margin: 0.5625rem;
    width: max-content;
    aspect-ratio: 1/1;
  }

  .pages .container {
    padding: 0.5625rem;
    position: relative;
    width: 100%;
    height: 100%;
    display: inline-block;
  }

  .pages a {
    padding: 1.25rem;
    background-color: #fff;
  }

  .pages img {
    width: 3.75rem;
    height: 3.75rem;
  }

  @media screen and (max-width: 767px) {
    ul.pages {
      display: grid;
      grid-template-columns: 1fr 1fr;
      align-self: center;
      width: max-content;
    }

    ul.pages li {
      justify-self: center;
      align-self: center;
    }
  }

  @media screen and (min-width: 768px) {
    @property --angle {
      syntax: '<angle>';
      initial-value: 0deg;
      inherits: false;
    }

    .pages .container::before,
    .pages .container::after {
      content: '';
      position: absolute;
      inset: 0;
      background: conic-gradient(
        from var(--angle, 0deg),
        rgba(246, 150, 86, 0.8) 0deg 90deg,
        rgba(127, 118, 178, 0.8) 90deg 180deg,
        rgba(242, 121, 127, 0.8) 180deg 270deg,
        rgba(156, 214, 203, 0.8) 270deg 360deg
      );
      z-index: -1;
      animation: spin 6s linear infinite;
      filter: blur(60px);
    }

    .pages .container::after {
      animation-duration: 12s;
      opacity: 0.6;
      filter: blur(12px);
    }

    @keyframes spin {
      0% {
        --angle: 0deg;
      }
      100% {
        --angle: 360deg;
      }
    }
  }
</style>
