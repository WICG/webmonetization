---
import { getLangFromUrl, useTranslations } from '../../i18n/utils'
import NavToolsDropdown from './NavToolsDropdown.astro'
import HamburgerMenu from '@assets/hamburger-menu.svg'
import CloseMenu from '@assets/close-menu.svg'
import ChevronArrow from '@assets/arrow-chevron.svg'
import { Image } from 'astro:assets';
import wmLogo from '@assets/wm-logo.svg';

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const homePageUrl = lang === 'en' ? '/' : `/${lang}/`
---

<header>
  <nav class='site-nav contentWrapper' id='siteNav'>
    <a href={homePageUrl} class='site-title'>
      <Image src={wmLogo} alt='Web Monetization logo' />
    </a>
    <button
      id='menuToggle'
      class='menu-toggle ghost btn'
      aria-controls='nav-menu'
      aria-expanded='false'
      aria-label='Toggle Menu'
      title='Toggle Menu'
      type='button'
    >
      <HamburgerMenu class='menu-icon icon--hamburger' />
      <CloseMenu class='menu-icon icon--close' />
    </button>
    <ul id='navMenu' class='nav-menu collapsed'>
      <li class='nav-link__tools' id='tools-wrapper'>
        <button
          id='toolsToggle'
          class='tools-toggle'
          aria-expanded='false'
          aria-label='Tools Menu'
          title='Tools Menu'
          type='button'
        >
          Tools
          <ChevronArrow class='tools-arrow-icon' />
        </button>
        <NavToolsDropdown />
      </li>
      <li class='nav-link__docs'>
        <a href='/docs' data-umami-event='Landing page - WebMo docs'
          >{t('nav.documentation')}</a
        >
      </li>
      <li class='nav-link__spec'>
        <a href='/specification' data-umami-event='Landing page - WebMo specs'
          >{t('nav.specification')}</a
        >
      </li>
    </ul>
  </nav>
</header>

<style>
  header {
    color: var(--nav-text-color);
    font: var(--font-small-regular);
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 3;
  }

  nav.site-nav {
    display: flex;
    align-items: center;
    position: relative;
    justify-content: space-between;
    padding: var(--padding-xs) var(--padding-2xl);
    background-color: var(--color-white);
  }

  .nav-menu button {
    color: var(--nav-text-color);
  }

  .nav-menu button,
  .nav-menu a {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    background: none;
    border: none;
    color: var(--nav-text-color);
    cursor: pointer;
    padding: var(--padding-sm) var(--padding-md);
    text-decoration: none;
    border-radius: var(--moderate-rounding);
  }

  .nav-menu button:hover,
  .nav-menu button:focus-visible,
  .nav-menu a:hover,
  .nav-menu a:focus-visible {
    background: var(--surface-hover-color);
    color: var(--button-hover-color);
    fill: var(--button-hover-color);
  }

  .tools-arrow-icon {
    height: var(--spacing-md);
    width: var(--spacing-md);
    display: inline-block;
    fill: var(--nav-text-color);
    margin: var(--spacing-3xs) 0;
    transition: transform 0.2s ease;
  }

  .nav-menu button:hover .tools-arrow-icon,
  .nav-menu button:focus-visible .tools-arrow-icon {
    fill: var(--button-hover-color);
  }

  .rotate-180 {
    transform: rotate(180deg);
  }

  .site-title {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 100%;
  }

  .site-title img {
    width: var(--icon-size-nav-home-md);
    height: var(--icon-size-nav-home-md);
    display: block;
  }

  button.menu-toggle {
    width: 3rem;
    height: 3rem;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .menu-icon {
    transition: 0.5s ease-in-out;
    cursor: pointer;
    height: 1.25rem;
    width: 1.25rem;
    fill: var(--nav-text-color);
    background-color: transparent;
    display: block;
    opacity: 1;
  }

  .menu-icon:hover,
  .menu-icon:focus-visible {
    fill: var(--button-hover-color);
  }

  .nav-menu {
    display: flex;
    gap: var(--spacing-md);
  }

  .collapsed {
    display: none;
  }

  @media screen and (max-width: 767px) {
    .site-nav.collapsed {
      box-shadow: 0 12px 20px 0px rgba(0, 0, 0, 0.06);
      border-radius: var(--moderate-rounding);
      padding: var(--padding-2xs) var(--padding-xs) var(--padding-2xs)
        var(--padding-md);
      margin: var(--spacing-md) var(--spacing-md) 0 var(--spacing-md);
    }

    .site-nav.expanded {
      background-color: var(--color-white);
      width: 100vw;
      height: 100vh;
      position: fixed;
    }

    .site-nav.expanded .nav-menu {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: var(--color-white);
      list-style: none;
      display: flex;
      flex-direction: column;
      align-items: stretch;
      gap: var(--spacing-md);
      padding: 0;
      margin: 0;
      max-width: 100%;
    }

    .site-nav.expanded .nav-menu button,
    .site-nav.expanded .nav-menu a {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      width: 100%;
    }

    #tools-wrapper button {
      width: 100%;
      justify-content: space-between;
    }

    .site-nav.collapsed .site-title img {
      width: var(--spacing-2xl);
      height: var(--spacing-2xl);
      flex: none;
    }

    .site-nav.expanded .site-title img {
      display: none;
    }

    button.menu-toggle {
      display: flex;
    }

    .site-nav.expanded button.menu-toggle {
      position: fixed;
      top: 0;
      right: 0;
      z-index: 2;
      margin: var(--spacing-sm);
    }

    button.menu-toggle {
      display: flex;
    }

    .icon--close {
      display: none;
    }

    .icon--hamburger {
      display: block;
    }

    .menu-toggle.open .icon--hamburger {
      display: none;
    }

    .menu-toggle.open .icon--close {
      display: block;
    }
  }

  #tools-wrapper {
    position: relative;
  }

  @media screen and (min-width: 768px) {
    header {
      background-color: var(--color-white);
      box-shadow: 0 12px 20px 0px rgba(0, 0, 0, 0.06);
    }

    .nav-menu {
      align-items: center;
      list-style-type: none;
      flex: 1;
      justify-content: end;
    }

    .menu-toggle {
      display: none;
    }

    .collapsed {
      display: block;
    }
  }
</style>

<script>
  const navBar = document.getElementById('siteNav')
  const menuToggleButton = document.getElementById('menuToggle')
  const navMenu = document.getElementById('navMenu')
  const toolsButton = document.querySelector('#tools-wrapper > button')
  const toolsDropdown = document.querySelector('#tools-wrapper .tools-dropdown')
  const isWide = window.matchMedia('(min-width: 768px)')
  const arrow = toolsButton?.querySelector('.tools-arrow-icon')

  let menuOpen =
    !isWide.matches && menuToggleButton?.classList.contains('open')
      ? true
      : false
  let submenuOpen = toolsDropdown?.classList.contains('open') ? true : false

  const openMenu = () => {
    menuToggleButton?.setAttribute('aria-expanded', 'true')
    navMenu?.classList.remove('collapsed')
    menuToggleButton?.classList.add('open')
    menuToggleButton?.classList.remove('closed')
    menuOpen = true
    navBar?.classList.add('expanded')
    navBar?.classList.remove('collapsed')
  }

  const closeMenu = () => {
    menuToggleButton?.setAttribute('aria-expanded', 'false')
    if (!isWide.matches) {
      navMenu?.classList.add('collapsed')
    }
    menuToggleButton?.classList.add('closed')
    menuToggleButton?.classList.remove('open')
    menuOpen = false
    navBar?.classList.remove('expanded')
    navBar?.classList.add('collapsed')
    closeSubmenu()
  }

  const openSubmenu = () => {
    toolsDropdown?.classList.add('open')
    arrow?.classList.add('rotate-180')
    toolsButton?.setAttribute('aria-expanded', 'true')
    submenuOpen = true
  }

  const closeSubmenu = () => {
    toolsDropdown?.classList.remove('open')
    arrow?.classList.remove('rotate-180')
    toolsButton?.setAttribute('aria-expanded', 'false')
    submenuOpen = false
  }

  const handleMainToggle = () => {
    menuOpen ? closeMenu() : openMenu()
  }

  const handleSubmenuToggle = (event: MouseEvent) => {
    event.stopPropagation()
    submenuOpen ? closeSubmenu() : openSubmenu()
  }

  const handleClickOutside = (event: MouseEvent) => {
    if (!isWide.matches) {
      return
    }

    const target = event.target as Node
    const isInMenu = navMenu?.contains(target)
    const isInToggle = menuToggleButton?.contains(target)

    if (!isInMenu && !isInToggle) {
      closeMenu()
    }
  }

  const handleEsc = (event: KeyboardEvent) => {
    if (event.key === 'Escape') {
      if (submenuOpen) {
        closeSubmenu()
      }

      if (menuOpen) {
        closeMenu()
      }
    }
  }

  const handleResize = (event: MediaQueryListEvent | MediaQueryList) => {
    closeMenu()
    if (event.matches) {
      // Wide screen: navMenu always shown
      navMenu?.classList.remove('collapsed')
    }
  }

  menuToggleButton?.addEventListener('click', handleMainToggle)
  toolsButton?.addEventListener('click', handleSubmenuToggle)
  document.addEventListener('click', handleClickOutside)
  document.addEventListener('keydown', handleEsc)
  isWide.addEventListener('change', handleResize)
  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      closeMenu()
      closeSubmenu()
    }
  })
  handleResize(isWide)
</script>
