---
import UpdateCard from './UpdateCard.astro'
import type { UpdateContent } from '../../types/shared'
import ChevronArrow from '@assets/arrow-chevron.svg'
import { getLangFromUrl, useTranslations } from '../../i18n/utils'

interface Props {
  updates: Array<UpdateContent>
  heading: string
}

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const { updates, heading } = Astro.props
---

<section class='section'>
  <div class='contentWrapper'>
    <h2 class='updates-heading' id='updates-heading'>{heading}</h2>
    <div
      class='updates-carousel'
      id='updates-carousel'
      role='region'
      aria-roledescription='carousel'
      aria-labelledby='updates-heading'
    >
      <button
        class='carousel-button btn flexible'
        id='prev-button'
        aria-label={t('aria.nav.back')}
        aria-controls='updates-list'
      >
        <ChevronArrow class='button-arrow' id='prev-button-arrow' />
      </button>
      <div class='updates-list' id='updates-list' aria-live='polite'>
        {
          updates.map((update: UpdateContent, i: number) => (
            <div class='update-slide'>
              <UpdateCard
                blog={update}
                ctaButtonClass='secondary'
                h3Class='update-title'
                imgClass=''
                index={i}
              />
            </div>
          ))
        }
      </div>
      <button
        class='carousel-button btn flexible'
        id='next-button'
        aria-label={t('aria.nav.next')}
        aria-controls='updates-list'
      >
        <ChevronArrow class='button-arrow' id='next-button-arrow' />
      </button>
    </div>
    <div
      class='updates-dots'
      id='updates-dots'
      role='tablist'
      aria-label='Carousel controls'
    >
      {
        updates.map((_: UpdateContent, i: number) => (
          <button
            class:list={['dot', i === 0 && 'active']}
            role='tab'
            aria-labelledby={`carousel-heading-${i}`}
            aria-controls={`carousel-item-${i}`}
          />
        ))
      }
    </div>
  </div>
</section>

<style>
  .updates-heading {
    font: var(--font-h2);
    margin-bottom: var(--spacing-lg);
  }
  ul {
    list-style-type: none;
  }
  .updates-carousel {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }

  .updates-carousel .carousel-button {
    flex-shrink: 0;
    padding: 0;
    border: none;
    background-color: inherit;
  }

  .button-arrow {
    width: 1.25rem;
    height: 1.25rem;
    display: inline-block;
    fill: var(--button-carousel-color);
  }

  .carousel-button.btn:hover .button-arrow,
  .carousel-button.btn:focus-visible .button-arrow {
    fill: var(--button-carousel-hover-color);
  }

  #prev-button-arrow {
    transform: rotate(90deg);
  }

  #next-button-arrow {
    transform: rotate(-90deg);
  }

  .updates-carousel .carousel-button:disabled .button-arrow {
    fill: var(--button-carousel-inactive-color);
  }

  .updates-list {
    width: 100%;
    display: flex;
    flex-direction: row;
    overflow-x: hidden;
    padding: 0;
  }
  .update-slide {
    flex: 0 0 100%;
  }

  .updates-dots {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: var(--spacing-xs);
    width: fit-content;
    margin: auto;
    padding: 0.5rem;
  }

  .updates-dots:focus-within {
    outline: auto;
    border-radius: var(--moderate-rounding);
  }

  .updates-dots button.dot {
    width: var(--spacing-sm);
    height: var(--spacing-sm);
    border-radius: 50%;
    border: none;
    background-color: #d9d9d9;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }

  .updates-dots button.dot:hover {
    background-color: var(--color-silver-400);
  }

  .updates-dots button.dot.active {
    background: linear-gradient(
      to right,
      var(--gradient-3-start),
      var(--gradient-3-stop)
    );
  }

  @media screen and (max-width: 1034px) {
    .updates-heading {
      font: var(--font-h4);
      text-align: center;
    }
    .updates-dots {
      margin-bottom: var(--spacing-lg);
    }
  }
</style>

<script>
  const updatesContainer = document.querySelector('#updates-carousel')
  const updatesList = document.querySelector('#updates-list')
  const prevButton = document.querySelector<HTMLButtonElement>('#prev-button')
  const nextButton = document.querySelector<HTMLButtonElement>('#next-button')
  const carouselControls = document.querySelector<HTMLElement>('#updates-dots')
  const carouselDots = document.querySelectorAll<HTMLButtonElement>(
    '#updates-dots button.dot'
  )
  const carouselCTAs = document.querySelectorAll('a.carousel-cta')
  const updates = Array.from(document.querySelectorAll('.update-slide'))
  const numberOfUpdates = carouselDots.length
  let currentIndex = 0
  const preferedScrollBehaviour: ScrollBehavior = matchMedia(
    '(prefers-reduced-motion: reduce)'
  ).matches
    ? 'auto'
    : 'smooth'

  if (updatesList instanceof HTMLElement) {
    let width = updatesList.clientWidth
    let touchStartX = 0
    let touchEndX = 0
    const swipeThreshold = 50

    function updateTabBehaviour(index: number) {
      carouselCTAs.forEach((link, i) => {
        if (link instanceof HTMLAnchorElement) {
          link.tabIndex = i === index ? 0 : -1
        }
      })
    }

    function updateDots(index: number) {
      carouselDots.forEach((dot, i) =>
        dot.classList.toggle('active', i === index)
      )
    }

    function updateAccessibilityTree(index: number) {
      updates.forEach((item, i) => {
        item.ariaHidden = index === i ? null : true
      })
      carouselDots.forEach((dot, i) => {
        const selected = i === index

        dot.setAttribute('aria-selected', selected.toString())
        dot.setAttribute('tabindex', selected ? '0' : '-1')
      })
    }

    function beforeScroll(indexToGo: number) {
      updateDots(indexToGo)
      updateTabBehaviour(indexToGo)
      updateAccessibilityTree(indexToGo)
    }

    function scrollToUpdate(index: number) {
      beforeScroll(index)
      updates[index].scrollIntoView({
        behavior: preferedScrollBehaviour,
        inline: 'start',
        block: 'nearest',
      })
    }

    function navigateByArrow(direction: 'left' | 'right') {
      setCurrentIndex(direction)
      scrollToUpdate(currentIndex)
    }

    function navigateByDot(index: number) {
      scrollToUpdate(index)
    }

    function setCurrentIndex(direction: 'left' | 'right') {
      let indexToGo
      if (direction === 'left') {
        indexToGo =
          currentIndex - 1 < 0 ? numberOfUpdates - 1 : currentIndex - 1
      } else {
        indexToGo = currentIndex >= numberOfUpdates - 1 ? 0 : currentIndex + 1
      }

      currentIndex = indexToGo
    }

    window.addEventListener('resize', () => {
      width = updatesList.clientWidth

      updatesList.scrollTo({
        left: currentIndex * width,
        behavior: 'auto',
      })
    })

    prevButton?.addEventListener('click', () => navigateByArrow('left'))
    nextButton?.addEventListener('click', () => navigateByArrow('right'))
    updatesContainer?.addEventListener('keydown', (e) => {
      const event = e as KeyboardEvent
      if (event.key === 'ArrowLeft') navigateByArrow('left')
      if (event.key === 'ArrowRight') navigateByArrow('right')
    })

    updatesList.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX
    })

    updatesList.addEventListener('touchmove', (e) => {
      touchEndX = e.touches[0].clientX
    })

    updatesList.addEventListener('touchend', () => {
      const swipeDistance = touchStartX - touchEndX
      if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
          navigateByArrow('right')
        } else {
          navigateByArrow('left')
        }
      }
    })

    function handleKeyNavigation(e: KeyboardEvent) {
      switch (e.key) {
        case 'ArrowRight':
          setCurrentIndex('right')
          break
        case 'ArrowLeft':
          setCurrentIndex('left')
          break
        case 'End':
          currentIndex = numberOfUpdates - 1
          break
        case 'Home':
          currentIndex = 0
          break
        default:
          return
      }

      e.preventDefault()
      navigateByDot(currentIndex)
      carouselDots[currentIndex].focus()
    }

    carouselControls?.addEventListener('focusin', () => {
      carouselControls.addEventListener('keydown', handleKeyNavigation)
    })

    carouselDots.forEach((dot, i) => {
      dot.addEventListener('click', () => navigateByDot(i))
    })

    updateTabBehaviour(0)
    updateAccessibilityTree(0)
  }
</script>
