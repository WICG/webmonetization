---
import UpdateCard from './UpdateCard.astro'
import type { UpdateContent } from '../../types/shared'
import ChevronArrow from '../../../public/img/arrow-chevron.svg'

export interface Updates {
  updates: Array<UpdateContent>
}

const { updates } = Astro.props
---

<section class='section'>
  <div class='contentWrapper'>
    <h2 class='updates-heading'>Important Updates</h2>
    <div class='updates-carousel' id='updates-carousel'>
      <button
        class='carousel-button btn flexible'
        id='prev-button'
        aria-label='Previous'
        aria-controls='#updates-list'
        disabled
      >
        <ChevronArrow class='button-arrow' id='prev-button-arrow' />
      </button>
      <ul class='updates-list' id='updates-list'>
        {
          updates.map((update: UpdateContent) => (
            <li class='update-slide'>
              <UpdateCard
                blog={update}
                ctaButtonClass='secondary'
                h3Class='update-title'
                imgClass=''
              />
            </li>
          ))
        }
      </ul>
      <button
        class='carousel-button btn flexible'
        id='next-button'
        aria-label='Next'
        aria-controls='#updates-list'
      >
        <ChevronArrow class='button-arrow' id='next-button-arrow' />
      </button>
    </div>
    <div class='updates-dots' id='updates-dots'>
      {
        updates.map((_: UpdateContent, i: number) => (
          <span class={`dot ${i === 0 ? 'active' : ''}`} aria-hidden='true' />
        ))
      }
    </div>
  </div>
</section>

<style>
  .updates-heading {
    font: var(--font-h2);
    margin-bottom: var(--spacing-lg);
  }
  ul {
    list-style-type: none;
  }
  .updates-carousel {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }

  .updates-carousel .carousel-button {
    flex-shrink: 0;
    padding: 0;
    border: none;
    background-color: inherit;
  }

  .button-arrow {
    width: 1.25rem;
    height: 1.25rem;
    display: inline-block;
    fill: var(--button-carousel-color);
  }

  .carousel-button.btn:hover .button-arrow,
  .carousel-button.btn:focus-visible .button-arrow {
    fill: var(--button-carousel-hover-color);
  }

  #prev-button-arrow {
    transform: rotate(90deg);
  }

  #next-button-arrow {
    transform: rotate(-90deg);
  }

  .updates-carousel .carousel-button:disabled .button-arrow {
    fill: var(--button-carousel-inactive-color);
  }

  .updates-list {
    width: 100%;
    display: flex;
    flex-direction: row;
    overflow-x: hidden;
    padding: 0;
  }
  .update-slide {
    flex: 0 0 100%;
  }

  .updates-dots {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: var(--spacing-xs);
  }

  .updates-dots span {
    display: inline-block;
    width: var(--spacing-sm);
    height: var(--spacing-sm);
    border-radius: 50%;
    border: none;
    background-color: #d9d9d9;
  }

  .updates-dots span.active {
    background: linear-gradient(
      to right,
      var(--gradient-3-start),
      var(--gradient-3-stop)
    );
  }

  @media screen and (max-width: 1034px) {
    .updates-heading {
      font: var(--font-h4);
      text-align: center;
    }
    .updates-dots {
      margin-bottom: var(--spacing-lg);
    }
  }
</style>

<script>
  const updatesContainer = document.querySelector('#updates-carousel')
  const updatesList = document.querySelector('#updates-list')
  const prevButton: HTMLButtonElement | null =
    document.querySelector('#prev-button')
  const nextButton: HTMLButtonElement | null =
    document.querySelector('#next-button')
  const carouselDots = document.querySelectorAll('#updates-dots .dot')
  const carouselCTAs = document.querySelectorAll('a.carousel-cta')
  const numberOfUpdates = carouselDots.length
  let currentIndex = 0

  if (updatesList instanceof HTMLElement) {
    let width = updatesList.clientWidth

    function updateTabBehaviour(index: number) {
      carouselCTAs.forEach((link, i) => {
        if (link instanceof HTMLAnchorElement) {
          link.tabIndex = i === index ? 0 : -1
        }
      })
      if (prevButton && nextButton) {
        prevButton.disabled = index === 0
        nextButton.disabled = index === numberOfUpdates - 1
      }
    }

    function updateDots(index: number) {
      carouselDots.forEach((dot, i) =>
        dot.classList.toggle('active', i === index)
      )
    }

    function beforeScroll(indexToGo: number) {
      updateDots(indexToGo)
      updateTabBehaviour(indexToGo)
    }

    function scrollUpdates(direction: 'left' | 'right') {
      let indexToGo
      if (direction === 'left') {
        indexToGo = currentIndex - 1 < 0 ? 0 : currentIndex - 1
      } else {
        indexToGo =
          currentIndex >= numberOfUpdates - 1
            ? numberOfUpdates - 1
            : currentIndex + 1
      }

      beforeScroll(indexToGo)

      updatesList?.scrollTo({
        left: width * indexToGo,
        behavior: 'smooth',
      })

      currentIndex = indexToGo
    }

    window.addEventListener('resize', () => {
      width = updatesList.clientWidth

      updatesList.scrollTo({
        left: currentIndex * width,
        behavior: 'auto',
      })
    })

    prevButton?.addEventListener('click', () => scrollUpdates('left'))
    nextButton?.addEventListener('click', () => scrollUpdates('right'))
    updatesContainer?.addEventListener('keydown', (e) => {
      const event = e as KeyboardEvent;
      if (event.key === 'ArrowLeft') scrollUpdates('left')
      if (event.key === 'ArrowRight') scrollUpdates('right')
    })

    updateTabBehaviour(0)
  }
</script>
