---
import BlogCard from './BlogCard.astro'
import type { Blog } from '../../types/blog'
import ChevronArrow from '../../../public/img/arrow-chevron.svg'

export interface Updates {
  updates: Array<Blog>
}
---

<section class='section'>
  <div class='contentWrapper'>
    <h2 class='updates-heading'>Important Updates</h2>
    <div class='updates-carousel'>
      <button
        class='carousel-button btn flexible'
        id='prev-button'
        aria-label='Previous'
        aria-controls='#updates-list'
        disabled
      >
        <ChevronArrow class='button-arrow' id='prev-button-arrow' />
      </button>
      <ul class='updates-list' id='updates-list'>
        {
          updates.map((update) => (
            <li class='update-slide'>
              <BlogCard
                blog={update}
                ctaButtonClass='secondary'
                h3Class='update-title'
                imgClass=''
              />
            </li>
          ))
        }
      </ul>
      <button
        class='carousel-button btn flexible'
        id='next-button'
        aria-label='Next'
        aria-controls='#updates-list'
      >
        <ChevronArrow class='button-arrow' id='next-button-arrow' />
      </button>
    </div>
    <div class='updates-dots' id='updates-dots'>
      {updates.map((update) => <span />)}
    </div>
  </div>
</section>

<style>
  .updates-heading {
    font: var(--font-h2);
    margin-bottom: var(--spacing-lg);
  }
  ul {
    list-style-type: none;
  }
  .updates-carousel {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }

  .updates-carousel .carousel-button {
    flex-shrink: 0;
    padding: 0;
    border: none;
    background-color: inherit;
  }

  .button-arrow {
    width: 1.25rem;
    height: 1.25rem;
    display: inline-block;
    fill: var(--button-carousel-color);
  }

  .carousel-button.btn:hover .button-arrow,
  .carousel-button.btn:focus-visible .button-arrow {
    fill: var(--button-carousel-hover-color);
  }

  #prev-button-arrow {
    transform: rotate(90deg);
  }

  #next-button-arrow {
    transform: rotate(-90deg);
  }

  .updates-carousel .carousel-button:disabled .button-arrow {
    fill: var(--button-carousel-inactive-color);
  }

  .updates-list {
    width: 100%;
    display: flex;
    flex-direction: row;
    overflow-x: hidden;
    padding: 0;
  }
  .update-slide {
    flex: 0 0 100%;
  }

  .updates-dots {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: var(--spacing-xs);
  }

  .updates-dots span {
    display: inline-block;
    width: var(--spacing-sm);
    height: var(--spacing-sm);
    border-radius: 50%;
    border: none;
    background-color: #d9d9d9;
  }

  .updates-dots span.active-dot {
    background: linear-gradient(
      to right,
      var(--gradient-3-start),
      var(--gradient-3-stop)
    );
  }

  @media screen and (max-width: 1034px) {
    .updates-heading {
      font: var(--font-h4);
      text-align: center;
    }
    .updates-dots {
      margin-bottom: var(--spacing-lg);
    }
  }
</style>

<script>
  const updatesContainer = document.querySelector('#updates-list')
  const prevButton = document.querySelector('#prev-button')
  const nextButton = document.querySelector('#next-button')
  const carouselDots = document.querySelectorAll('#updates-dots span')
  const carouselLinks = document.querySelectorAll('a.carousel-links')
  const numberOfUpdates = carouselDots.length

  if (updatesContainer instanceof HTMLElement) {
    let width = updatesContainer.offsetWidth

    window.addEventListener('resize', () => {
      width = updatesContainer.offsetWidth
      const currentIndex = getCurrentSlideIndex()

      updatesContainer.scrollTo({
        left: currentIndex * width,
        behavior: 'auto',
      })
    })

    prevButton?.addEventListener('click', () => scrollUpdates('left'))
    nextButton?.addEventListener('click', () => scrollUpdates('right'))

    carouselDots[0].classList.add('active-dot')
    updateTabIndices(0)

    function scrollUpdates(direction: 'left' | 'right') {
      const amount = direction === 'left' ? -width : width

      updatesContainer?.scrollBy({
        left: amount,
        behavior: 'smooth',
      })

      // check for scrollend support
      if ('onscrollend' in window) {
        updatesContainer?.addEventListener('scrollend', () =>
          afterScroll(direction)
        )
      } else {
        let scrollTimeout: NodeJS.Timeout
        updatesContainer?.addEventListener('scroll', () => {
          clearTimeout(scrollTimeout)
          scrollTimeout = setTimeout(() => afterScroll(direction), 0)
        })
      }
    }

    function afterScroll(direction: 'left' | 'right') {
      const currentIndex = getCurrentSlideIndex()
      updateUI(direction, currentIndex)
      updateTabIndices(currentIndex)
    }

    function updateTabIndices(currentIndex: number) {
      carouselLinks.forEach((link, i) => {
        if (link instanceof HTMLAnchorElement) {
          link.tabIndex = i === currentIndex ? 0 : -1
        }
      })
      if (
        prevButton instanceof HTMLButtonElement &&
        nextButton instanceof HTMLButtonElement
      ) {
        prevButton.tabIndex = currentIndex === 0 ? -1 : 0
        nextButton.tabIndex = currentIndex === numberOfUpdates - 1 ? -1 : 0
      }
    }

    function updateUI(direction: 'left' | 'right', currentIndex: number) {
      const indexToGo =
        direction === 'left'
          ? currentIndex - 1 >= 0
            ? currentIndex
            : 0
          : currentIndex + 1 <= numberOfUpdates - 1
            ? currentIndex
            : numberOfUpdates - 1

      carouselDots.forEach((dot) => dot.classList.remove('active-dot'))
      carouselDots[indexToGo].classList.add('active-dot')

      // Try use disabled instead of inactive. I've removed the class
      prevButton?.classList.remove('inactive-arrow')
      nextButton?.classList.remove('inactive-arrow')

      if (indexToGo === 0) {
        prevButton?.classList.add('inactive-arrow')
      }

      if (indexToGo === numberOfUpdates - 1) {
        nextButton?.classList.add('inactive-arrow')
      }
    }

    function getCurrentSlideIndex() {
      if (!updatesContainer) return 0

      const scrollLeft = updatesContainer.scrollLeft
      const currentIndex = Math.round(scrollLeft / width)
      return currentIndex
    }
  }
</script>
